#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <sstream>
#include<iomanip>
#include <list>
#include <queue>
using namespace std;

int yol_sayaci = 0;
string yol;
vector<string> yollar;

const char FileName[] = "input.txt";



void yolyazdir(vector<int>& yolar)
{
	int size = yolar.size();
	for (int i = 0; i < size; i++) {
		yol += to_string(yolar[i]);
	}
	yol += "K";
	yollar.push_back(yol);
	yol.clear();
}


int gidilmedi(int x, vector<int>& yolar)
{
	int size = yolar.size();
	for (int i = 0; i < size; i++)
		if (yolar[i] == x)
			return 0;
	return 1;
}


void yolbull(vector<vector<int> >& g, int src,
	int dst, int v)
{

	queue<vector<int> > q;


	vector<int> yolar;
	yolar.push_back(src);
	q.push(yolar);
	while (!q.empty()) {
		yolar = q.front();
		q.pop();
		int last = yolar[yolar.size() - 1];


		if (last == dst)
			yolyazdir(yolar);

		for (int i = 0; i < g[last].size(); i++) {
			if (gidilmedi(g[last][i], yolar)) {
				vector<int> yeniyolar(yolar);
				yeniyolar.push_back(g[last][i]);
				q.push(yeniyolar);
			}
		}
	}
}


int main()
{
	int baglantilar = 0;
	int yolar = 0;
	int c = 0;
	vector<string> bolum;
	vector<string> birinci;
	string iz;
	string vector1;
	string vector2;
	string limitleyen = "->";
	string tokon;
	int yy1 = 0;
	int yy2 = 0;
	int e = 0;
	size_t posis = 0;

	int indeks = 0;
	ifstream dosyam(FileName);


	if (dosyam.is_open())
	{

		while (getline(dosyam, iz))
		{
			bolum.push_back(iz);
			
			
		}
	}
	dosyam.close();

	for (int i = 0; i < bolum.size(); i++) {
		if (bolum[i] == "Links:") {
			baglantilar = i;
			baglantilar++;
		}
		else if (bolum[i] == "Paths:") {
			yolar = i;
		}
	}

	e = yolar - baglantilar;


	stringstream ss(bolum[0]);
	while (ss.good()) {
		string substr;
		getline(ss, substr, ',');
		birinci.push_back(substr);
	}

	int i = 0;
	int j = 0;
	int V = 0;
	V = birinci.size();
	
	vector<vector<int> > gra;
	gra.resize(V);
	


	

	for (baglantilar; baglantilar < yolar; baglantilar++) {
		while ((posis = bolum[baglantilar].find(limitleyen)) != std::string::npos) {
			tokon = bolum[baglantilar].substr(0, posis);
			vector1 = tokon;
			vector2 = bolum[baglantilar].erase(0, posis + limitleyen.length());
		}


		for (int yy_sayac = 0; yy_sayac < birinci.size(); yy_sayac++) {
			if (vector1 == birinci[yy_sayac]) {
				yy1 = yy_sayac + 1;
			}
			else if (vector2 == birinci[yy_sayac]) {
				yy2 = yy_sayac + 1;
			}
		}
		
		gra[yy1-1].push_back(yy2-1);
	

	}
	


	int f = 0;
	for (f; f < V; f++) {
		int t = 0;
		for (t; t < V; t++) {
			yolbull(gra, f, t, V);
		}
		
	}

	vector<string> istenenyollar;
	yolar++;
	for (yolar; yolar < bolum.size(); yolar++) {
		istenenyollar.push_back(bolum[yolar]);
	}
	
	string* refArr = yollar.data();
	int size = yollar.size();


	vector<string> tum_yollar;

	vector<string> nodelar; // A A B B B

	char* nodes;
	for (int i = 0; i < birinci.size(); i++) {
		string str_obj = birinci[i];
		nodes = &str_obj[0];
		int sizeOfArray = sizeof(nodes) / sizeof(nodes[0]);
		string harf;
		harf = nodes[0];
		nodelar.push_back(harf);
	}

	char* char_arr;
	
	string alinan;

	for (int i = 0; i < size; i++) {
		string str_obj = refArr[i];
		char_arr = &str_obj[0];
		int sizeOfArray = sizeof(char_arr) / sizeof(char_arr[0]);
		for (int j = 0; j < sizeOfArray; j++) {
			string harf;
			harf = char_arr[j];
			if (harf == "K") {
				break;
			}
			int alma = stoi(harf);
			alinan += nodelar[alma];
		}
		tum_yollar.push_back(alinan);
		alinan.clear();
	}



	sort(tum_yollar.begin(), tum_yollar.end());
	tum_yollar.erase(unique(tum_yollar.begin(), tum_yollar.end()), tum_yollar.end());


	string cikan;

	for (int a = 0; a < istenenyollar.size(); a++) {
		int flag = 0;
		for (int b=0; b < tum_yollar.size(); b++) {
			flag++;
			if (istenenyollar[a] == tum_yollar[b]) {
				cikan += istenenyollar[a] + " [YES]\n";
				flag = flag - 1;
				break;
			}
			else if (flag == tum_yollar.size()) {
				cikan += istenenyollar[a] + " [NO]\n";
			}
		}

	}

	ofstream cikan_dosya("output.txt");
	if (cikan_dosya.is_open())
	{
		cikan_dosya << cikan;
		cikan_dosya.close();
	}

	
	return 0;
}
